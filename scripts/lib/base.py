from pathlib import Path
import os
import yaml
import ntpath
import re

class BaseExporter(object):
    def __init__(self, 
                 techniques_path, findings_path, playbooks_path,
                 fti_playbooks, fti_techiques, fti_findings
                 ):
        self.techniques_path = techniques_path
        self.findings_path = findings_path
        self.playbooks_path = playbooks_path

        self.techniques = self.load_yaml_descriptions(directory=self.techniques_path)
        self.findings = self.load_yaml_descriptions(directory=self.findings_path)
        self.playbooks = self.load_yaml_descriptions(directory=self.playbooks_path)

        self.fti_playbooks = fti_playbooks
        self.fti_techiques = fti_techiques
        self.fti_findings = fti_findings
    
    @staticmethod
    def flatten_categories(categories, parent='', delimiter='.'):
        flattened = []
        if isinstance(categories, dict) and 'category' in categories:
            categories = categories['category']
        for item in categories:
            if isinstance(item, dict):
                for key, value in item.items():
                    current_category = f"{parent}{delimiter}{key}" if parent else key
                    if isinstance(value, list):
                        flattened.extend(BaseExporter.flatten_categories(value, current_category, delimiter))
                    else:
                        flattened.append(current_category)
            else:
                flattened.append(f"{parent}{delimiter}{item}" if parent else item)
        return flattened
    
    # @staticmethod
    # def make_filename_from_title(text):
    #     # Encode the text to ASCII and decode it back to a string
    #     # while ignoring any characters that can't be encoded to ASCII
    #     ascii_text = text.encode('ascii', 'ignore').decode('ascii')
    #     ascii_text = ascii_text.lower().replace(" ","-")

    #     # Use regular expression to remove non-alphanumeric characters and dash
    #     cleaned_text = re.sub(r'[^a-zA-Z0-9-]+', '', ascii_text)

    #     return cleaned_text

    def load_yaml_descriptions(self, directory, recursive=True):
        descriptions = {}
        pathlist = Path(directory).rglob('*.yml')
        yaml_files =  [str(path) for path in pathlist]

        for filepath in yaml_files:
            with open(filepath, 'r') as yaml_file:
                yaml_data = yaml.safe_load(yaml_file)
                if yaml_data: 
                    description_id, _ = os.path.splitext(ntpath.basename(filepath))
                    yaml_data['id'] = description_id
                    yaml_data['filepath'] = filepath
                    descriptions[description_id] = yaml_data


        return descriptions

    # def export(self, record_type, export_directory_path, all_in_one=False, fields_to_include=None):

    #     if record_type == 'playbooks':
    #         self.techniques = self.load_yaml_descriptions(directory=self.techniques_path)
    #         self.findings = self.load_yaml_descriptions(directory=self.findings_path)
    #         self.playbooks = self.load_yaml_descriptions(directory=self.playbooks_path)
            
    #         self.export_playbooks(
    #             directory_path=export_directory_path,
    #             all_in_one=all_in_one,
    #             fields_to_include=fields_to_include
    #         )
        
    #     elif record_type == 'techniques':
    #         self.techniques = self.load_yaml_descriptions(directory=self.techniques_path)

    #         self.export_techniques(
    #             directory_path=export_directory_path,
    #             all_in_one=all_in_one,
    #             fields_to_include=fields_to_include
    #         )
        
    #     elif record_type == 'findings':
    #         self.findings = self.load_yaml_descriptions(directory=self.findings_path)

    #         self.export_findings(
    #             directory_path=export_directory_path,
    #             all_in_one=all_in_one,
    #             fields_to_include=fields_to_include
    #         )