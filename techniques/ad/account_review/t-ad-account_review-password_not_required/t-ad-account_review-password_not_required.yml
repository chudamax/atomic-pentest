title: Accounts with "Password Not Required" Flag
category: 
  - AD:
    - Account Review
tactic: Discovery
tags: []
description: 
  - title: 
    content: Enabling the "Password Not Required" flag doesn't necessarily mean that the passwords 
      for those accounts are actually empty. However, it significantly increases the risk 
      of users having blank passwords, which increases the chances of successful brute 
      force attacks and unauthorized access.

steps:
  - description: Enumerate user accounts with the "Password Not Required" flag enabled
    options: 
      - tool: Powershell AD Module
        usage: Get-ADUser -Filter {PasswordNotRequired -eq $true -and Enabled -eq $True} -Properties Name, sAMAccountName, PasswordNotRequired | Format-Table -AutoSize -Property sAMAccountName, PasswordNotRequired
        comments: 
          - You can add "| Measure-Object" to the powershell command to get a total number of the accounts

      - tool: ldapsearch
        usage: ldapsearch -x ldap://<dc_ip> -D "<user@domain.com>" -w '<password>' -b "DC=<domain,DC=com>" -b "(&(userAccountControl:1.2.840.113556.1.4.803:=32)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"
        
      - tool: bloodhound
        usage: MATCH (u:User) WHERE u.passwordnotreqd = true AND u.enabled = TRUE RETURN u.name,u.passwordnotreqd

  - description: Check if the identified accounts have an empty password
    options: 
      - tool: crackmapexec
        usage: crackmapexec smb <DC_IP> -u users.txt -p '' --continue-on-success

      - tool: patator
        usage: patator smb_login host=<DC_IP> user=FILE0 password='' 0=users.txt -x ignore:code=c000006d

      - tool: powershell
        usage: |
          $domain = "<domain_name>"
          $userList = Get-Content -Path "C:\Temp\users.txt"
          $password = ""

          # Load the required .NET assembly
          Add-Type -AssemblyName System.DirectoryServices.AccountManagement

          # Define the function to validate credentials
          Function Test-Credentials($userName, $password) {
              $pc = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Domain, $domain)
              Return $pc.ValidateCredentials($userName, $password)
          }

          # Iterate through the user list
          ForEach ($user in $userList) {
              $isValid = Test-Credentials -userName $user -password $password
              If ($isValid) {
                  Write-Host "[$user] - Valid password: $password"
              } Else {
                  Write-Host "[$user] - Invalid password: $password"
              }
          }
        comments:
     
comments:
  