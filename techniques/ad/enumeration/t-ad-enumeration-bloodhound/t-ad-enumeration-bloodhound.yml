title: Bloodhound Automated AD Information Gathering
category: 
  - AD:
    - Enumeration
    
tactic: Discovery
tags: []

description: BloodHound collects and visualizes a variety of information within an Active Directory environment, 
  including user and computer details, group memberships, access control lists (ACLs), domain trusts, 
  and interrelationships among these entities, facilitating the identification of potential attack 
  paths by uncovering normally obscured details such as unusual permissions, privilege escalations, 
  and hidden administrative rights.
  
references:
  - https://github.com/BloodHoundAD/BloodHound
  - https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound.html
  - https://github.com/fox-it/BloodHound.py
  - https://github.com/iphelix/dnschef
  - https://github.com/hausec/Bloodhound-Custom-Queries
  - https://gist.github.com/seajaysec/a4d4a545047a51053d52cba567f78a9b
  - https://github.com/porterhau5/BloodHound-Owned/blob/master/customqueries.json
  - https://github.com/hausec/Bloodhound-Custom-Queries
  - https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/

steps:
  - description: Install and run neo4j
    options:
      - tool: linux
        usage: |
          sudo mkdir /data
          sudo docker run --publish=7474:7474 --publish=7687:7687 --volume=$HOME/neo4j/data:/data neo4j
          open http://localhost:7474/browser/, connect using neo4j/neo4j creds, change the password
        comments:
      - tool: windows
        usage: |
          follow https://neo4j.com/docs/desktop-manual/current/installation/download-installation/ for installation
        comments:
  
  - description: Download and run the bloodhound data collector against all the domains
    options:
      - tool: BloodHound.py
        usage: |
          git clone https://github.com/fox-it/BloodHound.py.git
          cd BloodHound.py
          python3 setup.py install
          bloodhound-python -c DCOnly -d <domain.com> -dc <dc01.domain.com> -u <username> -p '<P@ssw0rd>'
        comments:
          - it's possible to specify the NS nameserver
          - other collection methods are also available DCOM, RDP,PSRemote, LoggedOn, Container, ObjectProps, ACL, All (all except
            LoggedOn)
          - | 
              if the NS nameserver is not reachable or there are any other DNS issues
              you can configure a local fake DNS server - https://github.com/iphelix/dnschef

              dnschef --fakeip <GC_DC_IP> -q
              bloodhound-python -c DCOnly -d <domain.com> -dc <dc01.domain.com> -u <username@domain.com> -p '<P@ssw0rd>' -ns 127.0.0.1

      - tool: SharpHound
        usage: SharpHound.exe --CollectionMethod DCOnly --Domain domain
        comments: 
  
  - description: Import data into bloodhound
    options:
      - tool: bloodhound
        usage: BloodHound -> Import Data
        comments:

comments: |
  In most cases the error appears when AD environment you want to import is large and exceed neo4j limits. 
  Run 
  neo4j-admin memrec

  and add results to neo4j.conf - example below:

  dbms.memory.heap.initial_size=6700m
  dbms.memory.heap.max_size=6700m
  dbms.memory.pagecache.size=3600m
  dbms.memory.off_heap.max_size=5100m
